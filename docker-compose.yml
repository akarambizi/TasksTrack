services:
  # Defines the client service.

  client:
    # Specifies the path to the Dockerfile for building the client's Docker image.
    # './client' is the directory containing the Dockerfile for the client.
    build: ./client
    # Maps port 3000 of the host machine to port 3000 inside the client container.
    # This allows you to access the client service on localhost:3000.
    ports:
      - "3000:3000"
    # Mounts the host's ./client directory to a specific directory inside the client container.
    # This allows for hot reloading of code changes.
    volumes:
      - ./client:/app
      - /app/node_modules
    # Specifies the command to start the client application inside the container.
    command: yarn dev --host
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 512M
    networks:
      - frontend

  server:
    # Specifies the path to the Dockerfile for building the server's Docker image.
    # './server' is the directory containing the Dockerfile for the server.
    build: ./server
    # Maps port 5206 of the host machine to port 5206 inside the server container.
    # This allows you to access the server service on localhost:5206.
    ports:
      - "5206:5206"
    # Mounts the host's ./server directory to a specific directory inside the server container.
    # This allows for hot reloading of code changes.
    volumes:
      - ./server:/app
    # Specifies the command to start the server application inside the container.
    # Updated to ensure compatibility with .NET 8.
    command:
      dotnet watch run --urls http://*:5206
    # Sets environment variables inside the server container.
    environment:
      - DOTNET_USE_POLLING_FILE_WATCHER=1
      - DOTNET_WATCH_RESTART_ON_RUDE_EDIT=true
      - DOTNET_CONSOLE_ALLOW_ANSI_COLOR=1
      - DOTNET_SYSTEM_CONSOLE_ALLOW_ANSI_COLOR_REDIRECTION=true
      - FORCE_COLOR=true
      - TERM=xterm-256color
      - COLORTERM=truecolor
      - DOTNET_LOGGING__CONSOLE__FORMATTEROPTIONS__COLORS=true
      - DOTNET_LOGGING__CONSOLE__DISABLECOLORS=false
      - ASPNETCORE_ENVIRONMENT=Development
    tty: true
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5206/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: 1G
        reservations:
          cpus: "0.5"
          memory: 512M
    # Specifies that the server service should be started only after the db service has been started.
    # This ensures that the database is ready before the server starts.
    depends_on:
      db:
        condition: service_healthy
    networks:
      - backend
      - frontend

  db:
    image: postgres:17
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_DB=taskstrack
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 512M
    networks:
      - backend

volumes:
  postgres_data:

networks:
  frontend:
    driver: bridge
  backend:
    driver: bridge
